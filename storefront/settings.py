"""
Django settings for storefront project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hs+c)fw5y*+w96g2t&bc#jcm3&v&az#4fvf=wj+mvysgpv6k2('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

# http://localhost:8000/playground/hello/
# https://mockaroo.com/ IMPORTANT for mock DATA
# queryset ----> field lookups in Django.com
# functions ----> db functions in Django.com
# admin changing ----> ModelAdmin in Django.com
# django validators ----> validators in Django.com
# drf-nested-routers ----> nested routes in github
# django-filter ----> genereic filters

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'playground', # or you can write ==> playground.apps.PlaygroundConfig
    'debug_toolbar',  # this is debug toolbar
    'rest_framework',  # this is django rest framework
    'djoser',  # this is djoser
    'django_filters',  # this is django filter
    'corsheaders',  # this is django-cors-headers
    'store',
    'tags',
    'likes',
    'core',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',    # this is cors middleware
    "debug_toolbar.middleware.DebugToolbarMiddleware",  # this is toolbar middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8001',
    'http://127.0.0.1:8001'
]

ROOT_URLCONF = 'storefront.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'storefront.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'storefront',
        'HOST':'localhost',
        'USER':'root',
        'PASSWORD':'kamran123',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    # we define properties here for applying it to all REST_apis like products, collections or others
    # 'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.LimitOffsetPagination',  # PageNumberPagination
    # 'PAGE_SIZE':10
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES':[   # for appyling permissions(required authentication globally)
    #     'rest_framework.permissions.AllowAny',
    #     # 'rest_framework.permissions.IsAuthenticated'
    # ]
}

# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
   'AUTH_HEADER_TYPES': ('JWT',),
   'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
}

AUTH_USER_MODEL = 'core.User'


DJOSER = {
    'SERIALIZERS':{
        'user_create': 'core.serializers.UserCreateSerializer',
        'current_user': 'core.serializers.UserSerializer',
    }
}


# for create --> http://127.0.0.1:8000/auth/users

# for login --> http://127.0.0.1:8000/auth/jwt/create
# {
#     "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY0NTc5NDY3OSwianRpIjoiY2Q1NDE1NDk0Y2VlNDQ1ZmIyMmFkYmYzNjY5NmYzZGEiLCJ1c2VyX2lkIjoyfQ.AKJ7GFfnw9wp_XtpSV2-QHLsOmPtnIQCdMGpOqJDMYw",
#     "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjQ1Nzk0Njc5LCJqdGkiOiJiOTkwMDYzMmU5ZTU0MzUzODIxYmZhM2M1OWU1MGM5OCIsInVzZXJfaWQiOjJ9.6R3MoZezalUoujOeiA43xKqTiuGXdpICuPY8zd6LiVM"
# }



# for smtp -----> docker run --rm -it -p 3000:80 -p 2525:25 rnwood/smtp4dev
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
# EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "localhost"
EMAIL_HOST_UESR = "localhost"
EMAIL_HOST_PASSWORD = "localhost"
EMAIL_PORT = 2525
DEFAULT_FROM_EMAIL = 'kamrannaseer76543@gmail.com'

ADMINS = [
    ("Name", 'name@gmail.com'),
    ("Kamran", 'kamrannaseer765@gmail.com')
]

# for redis running -----> docker run -p 6379:6379 redis
# for running celery(worker) -----> celery -A storefront worker --loglevel=info
CELERY_BROKER_URL = "redis://localhost:6379/1"
# for running celery(schedule) -----> celery -A storefront beat
CELERY_BEAT_SCHEDULE = {
    "notify_customers":{
        'task':"playground.task.notify_customers",
        'schedule':5,  # means after every 5 seconds   # go and view docmentation for detail
        'args':["This is Hello World!"]
    }
}


# for running it via flower ----> celery -A storefront flower 
# and then go to localhost:5555